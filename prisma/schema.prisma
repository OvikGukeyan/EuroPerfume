generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  favorites        Favorites?
  orders           Order[]
  verificationCode VerificationCode?
  Review           Review[]
}

model Category {
  id            Int            @id @default(autoincrement())
  labelRu       String         @unique
  labelDe       String         @unique
  products      Product[]
  productGroups ProductGroup[]
}

model ProductGroup {
  id         Int       @id @default(autoincrement())
  labelRu    String    @unique
  labelDe    String    @unique
  products   Product[]
  onTap      Boolean?
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  imageUrl       String[]
  videoUrl       String?
  categoryId     Int
  productGroupId Int
  gender         Gender?
  classification Classification[]
  series         String?
  volume         String?

  age     Int?
  purpose Purpose[]
  finish  Finish[]

  texture Texture[]
  formula Formula[]

  effect         Effect[]
  effectDuration Int?
  hypoallergenic Boolean?

  applicationMethod ApplicationMethod[]
  packagingFormat   PackagingFormat[]

  skinType SkinType[]
  size     String?

  productNotes  ProductNote[]
  aromas        Aroma[]
  concentration PerfumeConcentration?
  perfumer      String?
  brand         Brand                 @relation(fields: [brandId], references: [id])
  brandId       Int

  price         Decimal
  discountPrice Decimal?
  releaseYear   Int?
  isBestseller  Boolean?

  available      Boolean
  cartItems      CartItem[]
  favoritesItems FavoritesItem[]
  category       Category             @relation(fields: [categoryId], references: [id])
  productGroup   ProductGroup         @relation(fields: [productGroupId], references: [id])
  translations   ProductTranslation[]
  reviews        Review[]
  variations     ProductVariation[]
  OrderItem      OrderItem[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  popularProducts PopularProducts[] @relation("PopularProductsOnProducts")
}

model PopularProducts {
  id        Int       @id @default(autoincrement())
  date      DateTime  @unique
  products  Product[] @relation("PopularProductsOnProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductVariation {
  id        Int         @id @default(autoincrement())
  name      String
  imageUrl  String
  productId Int
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model ProductTranslation {
  id       Int       @id @default(autoincrement())
  language Languages

  description          String
  colorPalette         String?
  compositionFeatures  String?
  activeIngredients    String?
  certificates         String?
  ethics               String?
  material             String?
  brandCountry         String?
  manufacturingCountry String?

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([language, productId], name: "translation_unique")
}

model ProductNote {
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  note      Note     @relation(fields: [noteId], references: [id])
  noteId    Int
  noteType  NoteType

  @@id([productId, noteId, noteType])
}

model Note {
  id           Int           @id @default(autoincrement())
  labelRu      String        @unique
  labelDe      String        @unique
  productNotes ProductNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Effect {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purpose {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SkinType {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classification {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PackagingFormat {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Finish {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApplicationMethod {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Texture {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Formula {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aroma {
  id       Int       @id @default(autoincrement())
  labelRu  String    @unique
  labelDe  String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String
  totalAmount Decimal    @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
}

model CartItem {
  id          Int               @id @default(autoincrement())
  cartId      Int
  quantity    Int               @default(1)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  productId   Int
  variationId Int?
  cart        Cart              @relation(fields: [cartId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id], onDelete: Cascade)
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorites {
  id        Int             @id @default(autoincrement())
  userId    Int?            @unique
  token     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     FavoritesItem[]
}

model FavoritesItem {
  id          Int       @id @default(autoincrement())
  favoritesId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId   Int
  favorites   Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  rating    Int
  imageUrl  String[]
  reply     Reply?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @unique
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  Int             @id @default(autoincrement())
  userId              Int?
  token               String
  totalAmount         Decimal
  status              OrderStatus
  peymentId           String?
  items               OrderItem[]
  fullName            String
  deliveryFullNmae    String
  address             String
  houseNumber         String
  deliveryAddress     String
  deliveryHouseNumber String
  city                String
  country             String
  deliveryCity        String
  deliveryCountry     String
  zip                 String
  deliveryZip         String
  postNumber          String?
  postOffice          String?
  packstationNumber   String?
  email               String
  phone               String
  comment             String?
  promocode           String?
  discount            Int?
  shippingMethod      ShippingMethods
  contactForm         ContactForms
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  trackingCode        String?
  shipments           Shipment[]
  user                User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shipment {
  id          Int      @id @default(autoincrement())
  orderId     Int
  carrier     String   @default("GHL")
  shipmentNo  String   @unique
  routingCode String?
  labelUrl    String?
  status      String   @default("CREATED") // CREATED | HANDED_OVER | IN_TRANSIT | DELIVERED | CANCELED ...
  payload     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id          Int               @id @default(autoincrement())
  name        String
  quantity    Int
  variationId Int?
  variation   ProductVariation? @relation(fields: [variationId], references: [id])
  orderId     Int
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product           @relation(fields: [productId], references: [id])
  productId   Int
}

model PromoCode {
  id         String    @id @default(uuid())
  code       String    @unique
  discount   Int
  isActive   Boolean   @default(true)
  disposable Boolean   @default(false)
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

model Slide {
  id       Int          @id @default(autoincrement())
  name     String
  images   SlideImage[]
  href     String
  location Int
  order    Int          @default(0)
}

model SlideImage {
  id         Int       @id @default(autoincrement())
  language   Languages
  desctopImg String
  mobileImg  String

  slideId Int
  Slide   Slide @relation(fields: [slideId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  NEW
  PENDING
  SUCCEEDED
  CENCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum PerfumeConcentration {
  EXTRAIT
  PERFUME
  EAU_DE_PARFUM
  EAU_DE_TOILETTE
  EAU_DE_COLOGNE
}

enum NoteType {
  TOP
  HEART
  BASE
}

enum Languages {
  RU
  DE
}

enum ContactForms {
  WA
  VB
  TG
}

enum ShippingMethods {
  BILLING_ADDRESS
  DIFFERENT_ADDRESS
  PACKSTATION
  POST_OFFICE
}
