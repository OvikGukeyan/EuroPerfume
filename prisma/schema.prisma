generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  favorites        Favorites?
  orders           Order[]
  verificationCode VerificationCode?
  Review           Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model ProductGroup {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id             Int                  @id @default(autoincrement())
  name           String
  imageUrl       String
  categoryId     Int
  productGroupId Int?
  brand          Brands
  concentration  PerfumeConcentration
  description    String
  gender         Gender

  // Новые поля для косметики
  age                 Int?
  series              String? // Название серии или коллекции
  productGroup        String? // Группа товара (например: помада, тушь, тональный крем и т.д.)
  purpose             Purpose? // Назначение (для лица / для глаз / для губ / для тела)
  colorPalette        String? // Цветовая палитра (основные оттенки)
  finish              Finish? // Финиш (матовый / глянцевый / сатиновый / металлик / сияющий / шиммер)
  texture             Texture? // Текстура (кремовая / гелевая / пудровая / жидкая)
  formula             Formula? // Формула средства (стойкая / увлажняющая / легкая / водостойкая / некомедогенная)
  compositionFeatures String? // Особенности состава (веганская / без парабенов / без спирта / без силиконов / без сульфатов)
  activeIngredients   String? // Активные ингредиенты (например: витамин Е, масло ши, гиалуроновая кислота, алоэ вера)
  effect              Effects? // Эффект (увлажняет, придаёт объём, выравнивает тон и т.д.)
  effectDuration      Int? // Длительность эффекта (например: до 8 часов, до 16 часов, до 24 часов)
  hypoallergenic      Boolean? // Гипоаллергенно (Да/Нет)
  certificates        String? // Сертификаты (Cruelty free, Leaping Bunny, EcoCert, Vegan и т.д.)
  ethics              String? // Этика (не тестировалось на животных, экологичный бренд)
  applicationMethod   ApplicationMethod? // Способ нанесения (кисть, аппликатор, пальцами, из флакона, формат карандаша)
  packagingFormat     PackagingFormat? // Формат упаковки (стик, карандаш, тюбик, флакон, баночка)
  volume              String? // Объём (в граммах или миллилитрах)
  skinType            SkinType? // Тип кожи (для всех типов, для сухой, жирной, чувствительной)
  classification      Classifications[] // Классификация (профессиональная, люкс, масс-маркет)

  topNotes             Notes[]
  heartNotes           Notes[]
  baseNotes            Notes[]
  price                Int
  releaseYear          Int
  aromas               Aromas[]
  brandCountry         String
  manufacturingCountry String
  perfumer             String
  available            Boolean
  cartItems            CartItem[]
  favoritesItems       FavoritesItem[]
  category             Category             @relation(fields: [categoryId], references: [id])
  translations         ProductTranslation[]
  reviews              Review[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  ProductGroup         ProductGroup?        @relation(fields: [productGroupId], references: [id])
}

model ProductTranslation {
  id          Int       @id @default(autoincrement())
  language    Languages
  description String
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([language, productId], name: "translation_unique")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorites {
  id        Int             @id @default(autoincrement())
  userId    Int?            @unique
  token     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     FavoritesItem[]
}

model FavoritesItem {
  id          Int       @id @default(autoincrement())
  favoritesId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId   Int
  favorites   Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  rating    Int
  replye    Reply?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @unique
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int?
  token        String
  totalAmount  Int
  status       OrderStatus
  peymentId    String?
  items        OrderItem[]
  fullName     String
  address      String
  email        String
  phone        String
  comment      String?
  deliveryType DeliveryTypes
  contactForm  ContactForms
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Int
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

model Slide {
  id         Int    @id @default(autoincrement())
  name       String
  desctopImg String
  tabletImg  String
  mobileImg  String
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CENCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum PerfumeConcentration {
  EXTRAIT
  PERFUME
  EAU_DE_PARFUM
  EAU_DE_TOILETTE
  EAU_DE_COLOGNE
}

enum Notes {
  CITRUS
  FLORAL
  GREEN
  FRUITY
  SPICY
  WOODY
  ORIENTAL
  MUSK
  AQUATIC
}

enum Classifications {
  NICHE
  ARABIAN
  DESIGNER
  CELEBRITY
  INDIE
}

enum Brands {
  CHANEL
  DIOR
  GUCCI
  TOM_FORD
  YSL
  VERSACE
  ARMANI
  GIVENCHY
  PRADA
  BURBERRY
  CALVIN_KLEIN
  LACOSTE
  HUGO_BOSS
  RALPH_LAUREN
  VALENTINO
  BOTTEGA_VENETA
  FENDI
  LOUIS_VUITTON
  SALVATORE_FERRAGAMO
  MICHAEL_KORS
  VICTORIA_SECRET
}

enum Purpose {
  FACE
  EYES
  LIPS
  BODY
}

enum Finish {
  MATTE
  GLOSSY
  SATIN
  METALLIC
  SHIMMER
}

enum Texture {
  CREAMY
  GEL
  POWDERY
  LIQUID
}

enum Formula {
  LONG_LASTING
  HYDRATING
  LIGHT
  WATERPROOF
  NON_COMEDOGENIC
}

enum Effects {
  HYDRATING
  VOLUMIZING
  TONE_BALANCING
  DEFINING
  SMOOTHING
  MATIFYING
  ILLUMINATING
  ANTIAGING
}

enum ApplicationMethod {
  BRUSH
  APPLICATOR
  FINGERS
  BOTTLE
  PENCIL
}

enum PackagingFormat {
  STICK
  PENCIL
  TUBE
  BOTTLE
  JAR
}

enum SkinType {
  ALL
  DRY
  OILY
  SENSITIVE
}

enum Languages {
  RU
  DE
}

enum DeliveryTypes {
  GB
  ES
  PBH
}

enum ContactForms {
  WA
  VB
  TG
}

enum Aromas {
  FOUGERE
  WOODY
  ORIENTAL
  FLORAL
  CITRUS
  CHYPRE
  LEATHER
  AQUATIC
  GREEN
  GOURMAND
}
