generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  favorites        Favorites?
  orders           Order[]
  verificationCode VerificationCode?
  Review           Review[]
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  products      Product[]
  productGroups ProductGroup[]
}

model ProductGroup {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Product {
  id             Int               @id @default(autoincrement())
  name           String
  imageUrl       String?
  categoryId     Int
  productGroupId Int
  brand          Brands
  description    String
  gender         Gender
  classification Classifications[]

  age                 Int?
  series              String?
  purpose             Purpose?
  colorPalette        String?
  finish              Finish?
  texture             Texture?
  formula             Formula?
  compositionFeatures String?
  activeIngredients   String?
  effect              Effects?
  effectDuration      Int?
  hypoallergenic      Boolean?
  certificates        String?
  ethics              String?
  applicationMethod   ApplicationMethod?
  packagingFormat     PackagingFormat?
  volume              String?
  skinType            SkinType?

  topNotes      Notes[]               @default([])
  heartNotes    Notes[]               @default([])
  baseNotes     Notes[]               @default([])
  aromas        Aromas[]              @default([])
  concentration PerfumeConcentration?
  perfumer      String?

  price                Int
  releaseYear          Int
  brandCountry         String
  manufacturingCountry String

  available      Boolean
  cartItems      CartItem[]
  favoritesItems FavoritesItem[]
  category       Category             @relation(fields: [categoryId], references: [id])
  productGroup   ProductGroup         @relation(fields: [productGroupId], references: [id])
  translations   ProductTranslation[]
  reviews        Review[]
  variations     ProductVariation[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ProductVariation {
  id        Int     @id @default(autoincrement())
  name      String
  imageUrl  String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductTranslation {
  id          Int       @id @default(autoincrement())
  language    Languages
  description String
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([language, productId], name: "translation_unique")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorites {
  id        Int             @id @default(autoincrement())
  userId    Int?            @unique
  token     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     FavoritesItem[]
}

model FavoritesItem {
  id          Int       @id @default(autoincrement())
  favoritesId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId   Int
  favorites   Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  rating    Int
  replye    Reply?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        Int      @id @default(autoincrement())
  reviewId  Int      @unique
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int?
  token        String
  totalAmount  Int
  status       OrderStatus
  peymentId    String?
  items        OrderItem[]
  fullName     String
  address      String
  email        String
  phone        String
  comment      String?
  deliveryType DeliveryTypes
  contactForm  ContactForms
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  name     String
  quantity Int
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

model Slide {
  id         Int    @id @default(autoincrement())
  name       String
  desctopImg String
  tabletImg  String
  mobileImg  String
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CENCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum PerfumeConcentration {
  EXTRAIT
  PERFUME
  EAU_DE_PARFUM
  EAU_DE_TOILETTE
  EAU_DE_COLOGNE
}

enum Notes {
  CITRUS
  FLORAL
  GREEN
  FRUITY
  SPICY
  WOODY
  ORIENTAL
  MUSK
  AQUATIC
}

enum Classifications {
  NICHE
  ARABIAN
  DESIGNER
  CELEBRITY
  INDIE
  PROFESSIONAL
  LUXURY
  MASS_MARKET
}

enum Brands {
  CHANEL
  DIOR
  GUCCI
  TOM_FORD
  YSL
  VERSACE
  ARMANI
  GIVENCHY
  PRADA
  BURBERRY
  CALVIN_KLEIN
  LACOSTE
  HUGO_BOSS
  RALPH_LAUREN
  VALENTINO
  BOTTEGA_VENETA
  FENDI
  LOUIS_VUITTON
  SALVATORE_FERRAGAMO
  MICHAEL_KORS
  VICTORIA_SECRET
}

enum Purpose {
  FACE
  EYES
  LIPS
  BODY
}

enum Finish {
  MATTE
  GLOSSY
  SATIN
  METALLIC
  SHIMMER
}

enum Texture {
  CREAMY
  GEL
  POWDERY
  LIQUID
}

enum Formula {
  LONG_LASTING
  HYDRATING
  LIGHT
  WATERPROOF
  NON_COMEDOGENIC
}

enum Effects {
  HYDRATING
  VOLUMIZING
  TONE_BALANCING
  DEFINING
  SMOOTHING
  MATIFYING
  ILLUMINATING
  ANTIAGING
}

enum ApplicationMethod {
  BRUSH
  APPLICATOR
  FINGERS
  BOTTLE
  PENCIL
}

enum PackagingFormat {
  STICK
  PENCIL
  TUBE
  BOTTLE
  JAR
}

enum SkinType {
  ALL
  DRY
  OILY
  SENSITIVE
}

enum Languages {
  RU
  DE
}

enum DeliveryTypes {
  GB
  ES
  PBH
}

enum ContactForms {
  WA
  VB
  TG
}

enum Aromas {
  FOUGERE
  WOODY
  ORIENTAL
  FLORAL
  CITRUS
  CHYPRE
  LEATHER
  AQUATIC
  GREEN
  GOURMAND
}
