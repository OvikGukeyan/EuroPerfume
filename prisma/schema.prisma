generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String
    role     UserRole  @default(USER)
    verified DateTime?

    cart Cart?

    provider   String?
    providerId String?

    verificationCode VerificationCode?

    orders Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    description   String

    price         Int

    gender        Gender[]

    concentration PerfumeConcentration

    brand         String

    notes         Notes[]

    types         Types[]
    
    releaseYear   Int

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    peymentId   String?

    items Json

    fullName String
    address  String
    email    String
    phone    String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int   @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

model Story {
    id              Int         @id @default(autoincrement())
    previewImageUrl String
    items           StoryItem[]
    createdAt       DateTime    @default(now())
}

model StoryItem {
    id        Int      @id @default(autoincrement())
    storyId   Int
    story     Story    @relation(fields: [storyId], references: [id])
    sourceUrl String
    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CENCELLED
}

enum UserRole {
    USER
    ADMIN
}

enum Gender {
    MALE
    FEMALE
    UNISEX
}

enum PerfumeConcentration {
    EXTRAIT
    PERFUME
    EAU_DE_PARFUM
    EAU_DE_TOILETTE
    EAU_DE_COLOGNE
}

enum Notes {
    CITRUS
    FLORAL
    GREEN
    FRUITY
    SPICY
    WOODY
    ORIENTAL
    MUSK
    AQUATIC
}

enum Types {
    NICHE
    ARABIAN
    DESIGNER
    CELEBRITY
    INDIE
}
